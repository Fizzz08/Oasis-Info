{"version":3,"sources":["index.js"],"names":["express","require","path","bcrypt","app","User","__dirname","use","json","extended","set","req","res","urlencoded","join","sendFile","cssFilePath","get","jsFilePath","render","post","data","hashedPassword","newUser","regeneratorRuntime","async","_context","prev","next","name","body","email","password","ReTypePassword","gender","Gender","abrupt","send","awrap","findOne","sent","save","console","existingUser","stop","check","_context2","compare","log","t0","port","listen","concat"],"mappings":"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","file":"index.min.js","sourcesContent":["const express = require(\"express\");\r\nconst path = require(\"path\");\r\nconst User = require(\"./config\");\r\nconst bcrypt = require('bcrypt');\r\n\r\nconst app = express();\r\napp.use(express.static(__dirname +'public'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.set(\"view engine\", \"ejs\");\r\n\r\n\r\napp.get('/public/css/styles.css', (req, res) => {\r\n    const cssFilePath = path.join(__dirname, 'public', 'css', 'styles.css');\r\n    res.type('text/css');\r\n    res.sendFile(cssFilePath);\r\n});\r\n\r\napp.get('/public/js/form.js', (req, res) => {\r\n    const jsFilePath = path.join(__dirname, 'public','js', 'form.js');\r\n    res.type('application/javascript');\r\n    res.sendFile(jsFilePath);\r\n});\r\n\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.render(\"main\");\r\n});\r\n\r\napp.get(\"/Signin\", (req, res) => {\r\n    res.render(\"main\");\r\n});\r\n\r\napp.get(\"/Login\", (req, res) => {\r\n    res.render(\"main\");\r\n});\r\n\r\n// Register User\r\napp.post(\"/Signin\", async (req, res) => {\r\n\r\n    const  data =  {\r\n        name: req.body.email,\r\n        password: req.body.password,\r\n        ReTypePassword: req.body.ReTypePassword,\r\n        firstName: req.body.FirstName,\r\n        lastName: req.body.LastName,\r\n        gender:req.body.Gender\r\n    }\r\n\r\n    if (data.password !== data.ReTypePassword) {\r\n        return res.send('Password and Retype Password do not match.');\r\n    }\r\n    else{   \r\n        const existingUser = await User.findOne({ name:data.name });\r\n        // Check if the Email already exists in the database\r\n        if (existingUser) {\r\n            res.send('User already exists. Please choose a different Email.');\r\n        } \r\n        else{\r\n            // Hash the password using bcrypt\r\n            const saltRounds = 10; \r\n            const hashedPassword = await bcrypt.hash(data.password, saltRounds);\r\n\r\n            data.password = hashedPassword;\r\n            const newUser = new User(data);\r\n\r\n\r\n            await newUser.save();\r\n            console.log('User registered:', newUser);\r\n            res.send('User registered successfully.');\r\n        }    \r\n    }\r\n\r\n});\r\n\r\n    \r\n\r\n\r\n    \r\n\r\n// Login user \r\napp.post(\"/Login\", async (req, res) => {\r\n    try {\r\n        const check = await User.findOne({name:req.body.email});\r\n        if (!check) {\r\n            res.send(\"User name cannot found\")\r\n        }\r\n        else{\r\n            // Compare the hashed password from the database with the plaintext password\r\n            const isPasswordMatch = await bcrypt.compare(req.body.password, check.password);\r\n            if (!isPasswordMatch) {\r\n                res.send(\"wrong Password\");\r\n            }\r\n            else {\r\n                res.render(\"home\");\r\n            }\r\n        }\r\n    }   \r\n            \r\n    catch {\r\n        res.send(\"wrong Details\");\r\n    }\r\n});\r\n\r\n\r\n// Define Port for Application\r\nconst port = 5000;\r\napp.listen(port, () => {\r\n    console.log(`Server listening on port http://localhost:${port}`)\r\n});"]}