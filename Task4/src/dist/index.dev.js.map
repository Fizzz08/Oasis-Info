{"version":3,"sources":["index.js"],"names":["express","require","path","User","bcrypt","app","use","__dirname","json","urlencoded","extended","set","get","req","res","cssFilePath","join","type","sendFile","jsFilePath","render","post","data","name","body","email","password","ReTypePassword","firstName","FirstName","lastName","LastName","gender","Gender","send","findOne","existingUser","saltRounds","hash","hashedPassword","newUser","save","console","log","check","compare","isPasswordMatch","port","listen"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst path = require(\"path\");\r\nconst User = require(\"./config\");\r\nconst bcrypt = require('bcrypt');\r\n\r\nconst app = express();\r\napp.use(express.static(__dirname +'public'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.set(\"view engine\", \"ejs\");\r\n\r\n\r\napp.get('/public/css/styles.css', (req, res) => {\r\n    const cssFilePath = path.join(__dirname, 'public', 'css', 'styles.css');\r\n    res.type('text/css');\r\n    res.sendFile(cssFilePath);\r\n});\r\n\r\napp.get('/public/js/form.js', (req, res) => {\r\n    const jsFilePath = path.join(__dirname, 'public','js', 'form.js');\r\n    res.type('application/javascript');\r\n    res.sendFile(jsFilePath);\r\n});\r\n\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.render(\"main\");\r\n});\r\n\r\napp.get(\"/Signin\", (req, res) => {\r\n    res.render(\"main\");\r\n});\r\n\r\napp.get(\"/Login\", (req, res) => {\r\n    res.render(\"main\");\r\n});\r\n\r\n// Register User\r\napp.post(\"/Signin\", async (req, res) => {\r\n\r\n    const  data =  {\r\n        name: req.body.email,\r\n        password: req.body.password,\r\n        ReTypePassword: req.body.ReTypePassword,\r\n        firstName: req.body.FirstName,\r\n        lastName: req.body.LastName,\r\n        gender:req.body.Gender\r\n    }\r\n\r\n    if (data.password !== data.ReTypePassword) {\r\n        return res.send('Password and Retype Password do not match.');\r\n    }\r\n    else{   \r\n        const existingUser = await User.findOne({ name:data.name });\r\n        // Check if the Email already exists in the database\r\n        if (existingUser) {\r\n            res.send('User already exists. Please choose a different Email.');\r\n        } \r\n        else{\r\n            // Hash the password using bcrypt\r\n            const saltRounds = 10; \r\n            const hashedPassword = await bcrypt.hash(data.password, saltRounds);\r\n\r\n            data.password = hashedPassword;\r\n            const newUser = new User(data);\r\n\r\n\r\n            await newUser.save();\r\n            console.log('User registered:', newUser);\r\n            res.send('User registered successfully.');\r\n        }    \r\n    }\r\n\r\n});\r\n\r\n    \r\n\r\n\r\n    \r\n\r\n// Login user \r\napp.post(\"/Login\", async (req, res) => {\r\n    try {\r\n        const check = await User.findOne({name:req.body.email});\r\n        if (!check) {\r\n            res.send(\"User name cannot found\")\r\n        }\r\n        else{\r\n            // Compare the hashed password from the database with the plaintext password\r\n            const isPasswordMatch = await bcrypt.compare(req.body.password, check.password);\r\n            if (!isPasswordMatch) {\r\n                res.send(\"wrong Password\");\r\n            }\r\n            else {\r\n                res.render(\"home\");\r\n            }\r\n        }\r\n    }   \r\n            \r\n    catch {\r\n        res.send(\"wrong Details\");\r\n    }\r\n});\r\n\r\n\r\n// Define Port for Application\r\nconst port = 5000;\r\napp.listen(port, () => {\r\n    console.log(`Server listening on port http://localhost:${port}`)\r\n});"],"file":"index.dev.js"}